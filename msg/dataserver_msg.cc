// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataserver_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataserver_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataserver_msg {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Velocity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargingFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargingFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_CMD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_CMD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_CMD_Init_Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_CMD_Init_Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CMD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CMD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CMD_Response_flag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CMD_Response_flag_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataserver_5fmsg_2eproto() {
  protobuf_AddDesc_dataserver_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataserver_msg.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, seq_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Velocity_descriptor_ = file->message_type(1);
  static const int Velocity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, v2_),
  };
  Velocity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Velocity_descriptor_,
      Velocity::default_instance_,
      Velocity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Velocity));
  ChargingFlag_descriptor_ = file->message_type(2);
  static const int ChargingFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingFlag, chargingflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingFlag, seq_),
  };
  ChargingFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargingFlag_descriptor_,
      ChargingFlag::default_instance_,
      ChargingFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargingFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargingFlag));
  GeneralData_descriptor_ = file->message_type(3);
  static const int GeneralData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralData, generalflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralData, io_number_),
  };
  GeneralData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralData_descriptor_,
      GeneralData::default_instance_,
      GeneralData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralData));
  Control_CMD_descriptor_ = file->message_type(4);
  static const int Control_CMD_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, goal_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, move_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, init_cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, projector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, generaldata_),
  };
  Control_CMD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_CMD_descriptor_,
      Control_CMD::default_instance_,
      Control_CMD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control_CMD));
  Control_CMD_Init_Config_descriptor_ = Control_CMD_descriptor_->nested_type(0);
  static const int Control_CMD_Init_Config_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, stop_delta_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, stop_delta_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, nav_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, nav_w_),
  };
  Control_CMD_Init_Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_CMD_Init_Config_descriptor_,
      Control_CMD_Init_Config::default_instance_,
      Control_CMD_Init_Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_CMD_Init_Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control_CMD_Init_Config));
  Response_CMD_descriptor_ = file->message_type(5);
  static const int Response_CMD_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, response_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, robot_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, battery_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, charging_flag_),
  };
  Response_CMD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_CMD_descriptor_,
      Response_CMD::default_instance_,
      Response_CMD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_CMD));
  Response_CMD_Response_flag_descriptor_ = Response_CMD_descriptor_->nested_type(0);
  static const int Response_CMD_Response_flag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, cmd_received_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, path_formed_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, goal_reached_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, emergency_stop_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, obstacle_forward_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, move_mode_flag_),
  };
  Response_CMD_Response_flag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_CMD_Response_flag_descriptor_,
      Response_CMD_Response_flag::default_instance_,
      Response_CMD_Response_flag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CMD_Response_flag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_CMD_Response_flag));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataserver_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Velocity_descriptor_, &Velocity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargingFlag_descriptor_, &ChargingFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralData_descriptor_, &GeneralData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_CMD_descriptor_, &Control_CMD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_CMD_Init_Config_descriptor_, &Control_CMD_Init_Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_CMD_descriptor_, &Response_CMD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_CMD_Response_flag_descriptor_, &Response_CMD_Response_flag::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataserver_5fmsg_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Velocity::default_instance_;
  delete Velocity_reflection_;
  delete ChargingFlag::default_instance_;
  delete ChargingFlag_reflection_;
  delete GeneralData::default_instance_;
  delete GeneralData_reflection_;
  delete Control_CMD::default_instance_;
  delete Control_CMD_reflection_;
  delete Control_CMD_Init_Config::default_instance_;
  delete Control_CMD_Init_Config_reflection_;
  delete Response_CMD::default_instance_;
  delete Response_CMD_reflection_;
  delete Response_CMD_Response_flag::default_instance_;
  delete Response_CMD_Response_flag_reflection_;
}

void protobuf_AddDesc_dataserver_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024dataserver_msg.proto\022\016dataserver_msg\"@"
    "\n\010Position\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005thet"
    "a\030\003 \001(\001\022\017\n\003seq\030\004 \001(\005:\002-1\"5\n\010Velocity\022\014\n\001"
    "v\030\001 \002(\001:\0010\022\014\n\001w\030\002 \002(\001:\0010\022\r\n\002v2\030\003 \001(\001:\0010\""
    "7\n\014ChargingFlag\022\027\n\014chargingFlag\030\001 \001(\005:\0010"
    "\022\016\n\003seq\030\002 \001(\005:\0010\"5\n\013GeneralData\022\023\n\013Gener"
    "alFlag\030\001 \001(\005\022\021\n\tIO_Number\030\002 \001(\005\"\232\003\n\013Cont"
    "rol_CMD\022\016\n\006CMD_ID\030\001 \002(\005\022+\n\tGoal_pose\030\002 \001"
    "(\0132\030.dataserver_msg.Position\022*\n\010velocity"
    "\030\003 \001(\0132\030.dataserver_msg.Velocity\022\024\n\tmove"
    "_mode\030\004 \001(\005:\0010\0229\n\010init_cfg\030\005 \001(\0132\'.datas"
    "erver_msg.Control_CMD.Init_Config\022\021\n\tpro"
    "jector\030\006 \001(\005\022(\n\002cf\030\007 \001(\0132\034.dataserver_ms"
    "g.ChargingFlag\0220\n\013generalData\030\010 \001(\0132\033.da"
    "taserver_msg.GeneralData\032b\n\013Init_Config\022"
    "\033\n\023stop_delta_distance\030\001 \001(\001\022\030\n\020stop_del"
    "ta_theta\030\002 \001(\001\022\r\n\005nav_v\030\003 \001(\001\022\r\n\005nav_w\030\004"
    " \001(\001\"\251\003\n\014Response_CMD\022\016\n\006CMD_ID\030\001 \002(\005\022B\n"
    "\016response_flags\030\002 \001(\0132*.dataserver_msg.R"
    "esponse_CMD.Response_flag\022,\n\nrobot_pose\030"
    "\003 \001(\0132\030.dataserver_msg.Position\022\034\n\020batte"
    "ry_capacity\030\004 \001(\005:\002-1\022\025\n\rcharging_flag\030\005"
    " \001(\005\032\341\001\n\rResponse_flag\022\024\n\010Error_ID\030\001 \001(\005"
    ":\002-1\022\035\n\021cmd_received_flag\030\002 \001(\005:\002-1\022\034\n\020p"
    "ath_formed_flag\030\003 \001(\005:\002-1\022\035\n\021goal_reache"
    "d_flag\030\004 \001(\005:\002-1\022\037\n\023emergency_stop_flag\030"
    "\005 \001(\005:\002-1\022!\n\025obstacle_forward_flag\030\006 \001(\005"
    ":\002-1\022\032\n\016move_mode_flag\030\007 \001(\005:\002-1", 1112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataserver_msg.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  Velocity::default_instance_ = new Velocity();
  ChargingFlag::default_instance_ = new ChargingFlag();
  GeneralData::default_instance_ = new GeneralData();
  Control_CMD::default_instance_ = new Control_CMD();
  Control_CMD_Init_Config::default_instance_ = new Control_CMD_Init_Config();
  Response_CMD::default_instance_ = new Response_CMD();
  Response_CMD_Response_flag::default_instance_ = new Response_CMD_Response_flag();
  Position::default_instance_->InitAsDefaultInstance();
  Velocity::default_instance_->InitAsDefaultInstance();
  ChargingFlag::default_instance_->InitAsDefaultInstance();
  GeneralData::default_instance_->InitAsDefaultInstance();
  Control_CMD::default_instance_->InitAsDefaultInstance();
  Control_CMD_Init_Config::default_instance_->InitAsDefaultInstance();
  Response_CMD::default_instance_->InitAsDefaultInstance();
  Response_CMD_Response_flag::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataserver_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataserver_5fmsg_2eproto {
  StaticDescriptorInitializer_dataserver_5fmsg_2eproto() {
    protobuf_AddDesc_dataserver_5fmsg_2eproto();
  }
} static_descriptor_initializer_dataserver_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kThetaFieldNumber;
const int Position::kSeqFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  theta_ = 0;
  seq_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    theta_ = 0;
    seq_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_theta;
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional int32 seq = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double theta = 3;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional int32 seq = 4 [default = -1];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double theta = 3;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional int32 seq = 4 [default = -1];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional int32 seq = 4 [default = -1];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(theta_, other->theta_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Velocity::kVFieldNumber;
const int Velocity::kWFieldNumber;
const int Velocity::kV2FieldNumber;
#endif  // !_MSC_VER

Velocity::Velocity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Velocity::InitAsDefaultInstance() {
}

Velocity::Velocity(const Velocity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Velocity::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  w_ = 0;
  v2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity::~Velocity() {
  SharedDtor();
}

void Velocity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Velocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity_descriptor_;
}

const Velocity& Velocity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Velocity* Velocity::default_instance_ = NULL;

Velocity* Velocity::New() const {
  return new Velocity;
}

void Velocity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
    w_ = 0;
    v2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Velocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double v = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_w;
        break;
      }

      // required double w = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_v2;
        break;
      }

      // optional double v2 = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v2_)));
          set_has_v2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Velocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double v = 1 [default = 0];
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->v(), output);
  }

  // required double w = 2 [default = 0];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->w(), output);
  }

  // optional double v2 = 3 [default = 0];
  if (has_v2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Velocity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double v = 1 [default = 0];
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->v(), target);
  }

  // required double w = 2 [default = 0];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->w(), target);
  }

  // optional double v2 = 3 [default = 0];
  if (has_v2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Velocity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double v = 1 [default = 0];
    if (has_v()) {
      total_size += 1 + 8;
    }

    // required double w = 2 [default = 0];
    if (has_w()) {
      total_size += 1 + 8;
    }

    // optional double v2 = 3 [default = 0];
    if (has_v2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Velocity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Velocity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_v2()) {
      set_v2(from.v2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Velocity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Velocity::Swap(Velocity* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(w_, other->w_);
    std::swap(v2_, other->v2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Velocity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity_descriptor_;
  metadata.reflection = Velocity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargingFlag::kChargingFlagFieldNumber;
const int ChargingFlag::kSeqFieldNumber;
#endif  // !_MSC_VER

ChargingFlag::ChargingFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargingFlag::InitAsDefaultInstance() {
}

ChargingFlag::ChargingFlag(const ChargingFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargingFlag::SharedCtor() {
  _cached_size_ = 0;
  chargingflag_ = 0;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargingFlag::~ChargingFlag() {
  SharedDtor();
}

void ChargingFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargingFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargingFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargingFlag_descriptor_;
}

const ChargingFlag& ChargingFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

ChargingFlag* ChargingFlag::default_instance_ = NULL;

ChargingFlag* ChargingFlag::New() const {
  return new ChargingFlag;
}

void ChargingFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chargingflag_ = 0;
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargingFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chargingFlag = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargingflag_)));
          set_has_chargingflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional int32 seq = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargingFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chargingFlag = 1 [default = 0];
  if (has_chargingflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chargingflag(), output);
  }

  // optional int32 seq = 2 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargingFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chargingFlag = 1 [default = 0];
  if (has_chargingflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chargingflag(), target);
  }

  // optional int32 seq = 2 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargingFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chargingFlag = 1 [default = 0];
    if (has_chargingflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargingflag());
    }

    // optional int32 seq = 2 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargingFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargingFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargingFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargingFlag::MergeFrom(const ChargingFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chargingflag()) {
      set_chargingflag(from.chargingflag());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargingFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargingFlag::CopyFrom(const ChargingFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargingFlag::IsInitialized() const {

  return true;
}

void ChargingFlag::Swap(ChargingFlag* other) {
  if (other != this) {
    std::swap(chargingflag_, other->chargingflag_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargingFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargingFlag_descriptor_;
  metadata.reflection = ChargingFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeneralData::kGeneralFlagFieldNumber;
const int GeneralData::kIONumberFieldNumber;
#endif  // !_MSC_VER

GeneralData::GeneralData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeneralData::InitAsDefaultInstance() {
}

GeneralData::GeneralData(const GeneralData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralData::SharedCtor() {
  _cached_size_ = 0;
  generalflag_ = 0;
  io_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralData::~GeneralData() {
  SharedDtor();
}

void GeneralData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeneralData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralData_descriptor_;
}

const GeneralData& GeneralData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

GeneralData* GeneralData::default_instance_ = NULL;

GeneralData* GeneralData::New() const {
  return new GeneralData;
}

void GeneralData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    generalflag_ = 0;
    io_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GeneralFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generalflag_)));
          set_has_generalflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IO_Number;
        break;
      }

      // optional int32 IO_Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IO_Number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &io_number_)));
          set_has_io_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GeneralFlag = 1;
  if (has_generalflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->generalflag(), output);
  }

  // optional int32 IO_Number = 2;
  if (has_io_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->io_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GeneralFlag = 1;
  if (has_generalflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->generalflag(), target);
  }

  // optional int32 IO_Number = 2;
  if (has_io_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->io_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GeneralFlag = 1;
    if (has_generalflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generalflag());
    }

    // optional int32 IO_Number = 2;
    if (has_io_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->io_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralData::MergeFrom(const GeneralData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_generalflag()) {
      set_generalflag(from.generalflag());
    }
    if (from.has_io_number()) {
      set_io_number(from.io_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralData::CopyFrom(const GeneralData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralData::IsInitialized() const {

  return true;
}

void GeneralData::Swap(GeneralData* other) {
  if (other != this) {
    std::swap(generalflag_, other->generalflag_);
    std::swap(io_number_, other->io_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralData_descriptor_;
  metadata.reflection = GeneralData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Control_CMD_Init_Config::kStopDeltaDistanceFieldNumber;
const int Control_CMD_Init_Config::kStopDeltaThetaFieldNumber;
const int Control_CMD_Init_Config::kNavVFieldNumber;
const int Control_CMD_Init_Config::kNavWFieldNumber;
#endif  // !_MSC_VER

Control_CMD_Init_Config::Control_CMD_Init_Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control_CMD_Init_Config::InitAsDefaultInstance() {
}

Control_CMD_Init_Config::Control_CMD_Init_Config(const Control_CMD_Init_Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control_CMD_Init_Config::SharedCtor() {
  _cached_size_ = 0;
  stop_delta_distance_ = 0;
  stop_delta_theta_ = 0;
  nav_v_ = 0;
  nav_w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control_CMD_Init_Config::~Control_CMD_Init_Config() {
  SharedDtor();
}

void Control_CMD_Init_Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control_CMD_Init_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_CMD_Init_Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_CMD_Init_Config_descriptor_;
}

const Control_CMD_Init_Config& Control_CMD_Init_Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Control_CMD_Init_Config* Control_CMD_Init_Config::default_instance_ = NULL;

Control_CMD_Init_Config* Control_CMD_Init_Config::New() const {
  return new Control_CMD_Init_Config;
}

void Control_CMD_Init_Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_delta_distance_ = 0;
    stop_delta_theta_ = 0;
    nav_v_ = 0;
    nav_w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control_CMD_Init_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_delta_distance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_delta_distance_)));
          set_has_stop_delta_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_stop_delta_theta;
        break;
      }

      // optional double stop_delta_theta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stop_delta_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_delta_theta_)));
          set_has_stop_delta_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nav_v;
        break;
      }

      // optional double nav_v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nav_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nav_v_)));
          set_has_nav_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_nav_w;
        break;
      }

      // optional double nav_w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nav_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nav_w_)));
          set_has_nav_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control_CMD_Init_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double stop_delta_distance = 1;
  if (has_stop_delta_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_delta_distance(), output);
  }

  // optional double stop_delta_theta = 2;
  if (has_stop_delta_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_delta_theta(), output);
  }

  // optional double nav_v = 3;
  if (has_nav_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->nav_v(), output);
  }

  // optional double nav_w = 4;
  if (has_nav_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->nav_w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control_CMD_Init_Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double stop_delta_distance = 1;
  if (has_stop_delta_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_delta_distance(), target);
  }

  // optional double stop_delta_theta = 2;
  if (has_stop_delta_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_delta_theta(), target);
  }

  // optional double nav_v = 3;
  if (has_nav_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->nav_v(), target);
  }

  // optional double nav_w = 4;
  if (has_nav_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->nav_w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control_CMD_Init_Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double stop_delta_distance = 1;
    if (has_stop_delta_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_delta_theta = 2;
    if (has_stop_delta_theta()) {
      total_size += 1 + 8;
    }

    // optional double nav_v = 3;
    if (has_nav_v()) {
      total_size += 1 + 8;
    }

    // optional double nav_w = 4;
    if (has_nav_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_CMD_Init_Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control_CMD_Init_Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control_CMD_Init_Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control_CMD_Init_Config::MergeFrom(const Control_CMD_Init_Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_delta_distance()) {
      set_stop_delta_distance(from.stop_delta_distance());
    }
    if (from.has_stop_delta_theta()) {
      set_stop_delta_theta(from.stop_delta_theta());
    }
    if (from.has_nav_v()) {
      set_nav_v(from.nav_v());
    }
    if (from.has_nav_w()) {
      set_nav_w(from.nav_w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control_CMD_Init_Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_CMD_Init_Config::CopyFrom(const Control_CMD_Init_Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_CMD_Init_Config::IsInitialized() const {

  return true;
}

void Control_CMD_Init_Config::Swap(Control_CMD_Init_Config* other) {
  if (other != this) {
    std::swap(stop_delta_distance_, other->stop_delta_distance_);
    std::swap(stop_delta_theta_, other->stop_delta_theta_);
    std::swap(nav_v_, other->nav_v_);
    std::swap(nav_w_, other->nav_w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control_CMD_Init_Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_CMD_Init_Config_descriptor_;
  metadata.reflection = Control_CMD_Init_Config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Control_CMD::kCMDIDFieldNumber;
const int Control_CMD::kGoalPoseFieldNumber;
const int Control_CMD::kVelocityFieldNumber;
const int Control_CMD::kMoveModeFieldNumber;
const int Control_CMD::kInitCfgFieldNumber;
const int Control_CMD::kProjectorFieldNumber;
const int Control_CMD::kCfFieldNumber;
const int Control_CMD::kGeneralDataFieldNumber;
#endif  // !_MSC_VER

Control_CMD::Control_CMD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control_CMD::InitAsDefaultInstance() {
  goal_pose_ = const_cast< ::dataserver_msg::Position*>(&::dataserver_msg::Position::default_instance());
  velocity_ = const_cast< ::dataserver_msg::Velocity*>(&::dataserver_msg::Velocity::default_instance());
  init_cfg_ = const_cast< ::dataserver_msg::Control_CMD_Init_Config*>(&::dataserver_msg::Control_CMD_Init_Config::default_instance());
  cf_ = const_cast< ::dataserver_msg::ChargingFlag*>(&::dataserver_msg::ChargingFlag::default_instance());
  generaldata_ = const_cast< ::dataserver_msg::GeneralData*>(&::dataserver_msg::GeneralData::default_instance());
}

Control_CMD::Control_CMD(const Control_CMD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control_CMD::SharedCtor() {
  _cached_size_ = 0;
  cmd_id_ = 0;
  goal_pose_ = NULL;
  velocity_ = NULL;
  move_mode_ = 0;
  init_cfg_ = NULL;
  projector_ = 0;
  cf_ = NULL;
  generaldata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control_CMD::~Control_CMD() {
  SharedDtor();
}

void Control_CMD::SharedDtor() {
  if (this != default_instance_) {
    delete goal_pose_;
    delete velocity_;
    delete init_cfg_;
    delete cf_;
    delete generaldata_;
  }
}

void Control_CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_CMD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_CMD_descriptor_;
}

const Control_CMD& Control_CMD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Control_CMD* Control_CMD::default_instance_ = NULL;

Control_CMD* Control_CMD::New() const {
  return new Control_CMD;
}

void Control_CMD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_id_ = 0;
    if (has_goal_pose()) {
      if (goal_pose_ != NULL) goal_pose_->::dataserver_msg::Position::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::dataserver_msg::Velocity::Clear();
    }
    move_mode_ = 0;
    if (has_init_cfg()) {
      if (init_cfg_ != NULL) init_cfg_->::dataserver_msg::Control_CMD_Init_Config::Clear();
    }
    projector_ = 0;
    if (has_cf()) {
      if (cf_ != NULL) cf_->::dataserver_msg::ChargingFlag::Clear();
    }
    if (has_generaldata()) {
      if (generaldata_ != NULL) generaldata_->::dataserver_msg::GeneralData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control_CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CMD_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Goal_pose;
        break;
      }

      // optional .dataserver_msg.Position Goal_pose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Goal_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goal_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // optional .dataserver_msg.Velocity velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_mode;
        break;
      }

      // optional int32 move_mode = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_mode_)));
          set_has_move_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_init_cfg;
        break;
      }

      // optional .dataserver_msg.Control_CMD.Init_Config init_cfg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_projector;
        break;
      }

      // optional int32 projector = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_projector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projector_)));
          set_has_projector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cf;
        break;
      }

      // optional .dataserver_msg.ChargingFlag cf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_generalData;
        break;
      }

      // optional .dataserver_msg.GeneralData generalData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control_CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CMD_ID = 1;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_id(), output);
  }

  // optional .dataserver_msg.Position Goal_pose = 2;
  if (has_goal_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goal_pose(), output);
  }

  // optional .dataserver_msg.Velocity velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }

  // optional int32 move_mode = 4 [default = 0];
  if (has_move_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->move_mode(), output);
  }

  // optional .dataserver_msg.Control_CMD.Init_Config init_cfg = 5;
  if (has_init_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->init_cfg(), output);
  }

  // optional int32 projector = 6;
  if (has_projector()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->projector(), output);
  }

  // optional .dataserver_msg.ChargingFlag cf = 7;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cf(), output);
  }

  // optional .dataserver_msg.GeneralData generalData = 8;
  if (has_generaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->generaldata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control_CMD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CMD_ID = 1;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_id(), target);
  }

  // optional .dataserver_msg.Position Goal_pose = 2;
  if (has_goal_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goal_pose(), target);
  }

  // optional .dataserver_msg.Velocity velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }

  // optional int32 move_mode = 4 [default = 0];
  if (has_move_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->move_mode(), target);
  }

  // optional .dataserver_msg.Control_CMD.Init_Config init_cfg = 5;
  if (has_init_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->init_cfg(), target);
  }

  // optional int32 projector = 6;
  if (has_projector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->projector(), target);
  }

  // optional .dataserver_msg.ChargingFlag cf = 7;
  if (has_cf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cf(), target);
  }

  // optional .dataserver_msg.GeneralData generalData = 8;
  if (has_generaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->generaldata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control_CMD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CMD_ID = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_id());
    }

    // optional .dataserver_msg.Position Goal_pose = 2;
    if (has_goal_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goal_pose());
    }

    // optional .dataserver_msg.Velocity velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional int32 move_mode = 4 [default = 0];
    if (has_move_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_mode());
    }

    // optional .dataserver_msg.Control_CMD.Init_Config init_cfg = 5;
    if (has_init_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_cfg());
    }

    // optional int32 projector = 6;
    if (has_projector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projector());
    }

    // optional .dataserver_msg.ChargingFlag cf = 7;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cf());
    }

    // optional .dataserver_msg.GeneralData generalData = 8;
    if (has_generaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generaldata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_CMD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control_CMD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control_CMD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control_CMD::MergeFrom(const Control_CMD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_goal_pose()) {
      mutable_goal_pose()->::dataserver_msg::Position::MergeFrom(from.goal_pose());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::dataserver_msg::Velocity::MergeFrom(from.velocity());
    }
    if (from.has_move_mode()) {
      set_move_mode(from.move_mode());
    }
    if (from.has_init_cfg()) {
      mutable_init_cfg()->::dataserver_msg::Control_CMD_Init_Config::MergeFrom(from.init_cfg());
    }
    if (from.has_projector()) {
      set_projector(from.projector());
    }
    if (from.has_cf()) {
      mutable_cf()->::dataserver_msg::ChargingFlag::MergeFrom(from.cf());
    }
    if (from.has_generaldata()) {
      mutable_generaldata()->::dataserver_msg::GeneralData::MergeFrom(from.generaldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control_CMD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_CMD::CopyFrom(const Control_CMD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_CMD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_goal_pose()) {
    if (!this->goal_pose().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void Control_CMD::Swap(Control_CMD* other) {
  if (other != this) {
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(goal_pose_, other->goal_pose_);
    std::swap(velocity_, other->velocity_);
    std::swap(move_mode_, other->move_mode_);
    std::swap(init_cfg_, other->init_cfg_);
    std::swap(projector_, other->projector_);
    std::swap(cf_, other->cf_);
    std::swap(generaldata_, other->generaldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control_CMD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_CMD_descriptor_;
  metadata.reflection = Control_CMD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_CMD_Response_flag::kErrorIDFieldNumber;
const int Response_CMD_Response_flag::kCmdReceivedFlagFieldNumber;
const int Response_CMD_Response_flag::kPathFormedFlagFieldNumber;
const int Response_CMD_Response_flag::kGoalReachedFlagFieldNumber;
const int Response_CMD_Response_flag::kEmergencyStopFlagFieldNumber;
const int Response_CMD_Response_flag::kObstacleForwardFlagFieldNumber;
const int Response_CMD_Response_flag::kMoveModeFlagFieldNumber;
#endif  // !_MSC_VER

Response_CMD_Response_flag::Response_CMD_Response_flag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_CMD_Response_flag::InitAsDefaultInstance() {
}

Response_CMD_Response_flag::Response_CMD_Response_flag(const Response_CMD_Response_flag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_CMD_Response_flag::SharedCtor() {
  _cached_size_ = 0;
  error_id_ = -1;
  cmd_received_flag_ = -1;
  path_formed_flag_ = -1;
  goal_reached_flag_ = -1;
  emergency_stop_flag_ = -1;
  obstacle_forward_flag_ = -1;
  move_mode_flag_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CMD_Response_flag::~Response_CMD_Response_flag() {
  SharedDtor();
}

void Response_CMD_Response_flag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_CMD_Response_flag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CMD_Response_flag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CMD_Response_flag_descriptor_;
}

const Response_CMD_Response_flag& Response_CMD_Response_flag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Response_CMD_Response_flag* Response_CMD_Response_flag::default_instance_ = NULL;

Response_CMD_Response_flag* Response_CMD_Response_flag::New() const {
  return new Response_CMD_Response_flag;
}

void Response_CMD_Response_flag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_id_ = -1;
    cmd_received_flag_ = -1;
    path_formed_flag_ = -1;
    goal_reached_flag_ = -1;
    emergency_stop_flag_ = -1;
    obstacle_forward_flag_ = -1;
    move_mode_flag_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_CMD_Response_flag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Error_ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
          set_has_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_received_flag;
        break;
      }

      // optional int32 cmd_received_flag = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_received_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_received_flag_)));
          set_has_cmd_received_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_path_formed_flag;
        break;
      }

      // optional int32 path_formed_flag = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_path_formed_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &path_formed_flag_)));
          set_has_path_formed_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goal_reached_flag;
        break;
      }

      // optional int32 goal_reached_flag = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goal_reached_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_reached_flag_)));
          set_has_goal_reached_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emergency_stop_flag;
        break;
      }

      // optional int32 emergency_stop_flag = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emergency_stop_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_stop_flag_)));
          set_has_emergency_stop_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_obstacle_forward_flag;
        break;
      }

      // optional int32 obstacle_forward_flag = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obstacle_forward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_forward_flag_)));
          set_has_obstacle_forward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_move_mode_flag;
        break;
      }

      // optional int32 move_mode_flag = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_mode_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_mode_flag_)));
          set_has_move_mode_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_CMD_Response_flag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Error_ID = 1 [default = -1];
  if (has_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // optional int32 cmd_received_flag = 2 [default = -1];
  if (has_cmd_received_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd_received_flag(), output);
  }

  // optional int32 path_formed_flag = 3 [default = -1];
  if (has_path_formed_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->path_formed_flag(), output);
  }

  // optional int32 goal_reached_flag = 4 [default = -1];
  if (has_goal_reached_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goal_reached_flag(), output);
  }

  // optional int32 emergency_stop_flag = 5 [default = -1];
  if (has_emergency_stop_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->emergency_stop_flag(), output);
  }

  // optional int32 obstacle_forward_flag = 6 [default = -1];
  if (has_obstacle_forward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->obstacle_forward_flag(), output);
  }

  // optional int32 move_mode_flag = 7 [default = -1];
  if (has_move_mode_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->move_mode_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_CMD_Response_flag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Error_ID = 1 [default = -1];
  if (has_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // optional int32 cmd_received_flag = 2 [default = -1];
  if (has_cmd_received_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd_received_flag(), target);
  }

  // optional int32 path_formed_flag = 3 [default = -1];
  if (has_path_formed_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->path_formed_flag(), target);
  }

  // optional int32 goal_reached_flag = 4 [default = -1];
  if (has_goal_reached_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goal_reached_flag(), target);
  }

  // optional int32 emergency_stop_flag = 5 [default = -1];
  if (has_emergency_stop_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->emergency_stop_flag(), target);
  }

  // optional int32 obstacle_forward_flag = 6 [default = -1];
  if (has_obstacle_forward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->obstacle_forward_flag(), target);
  }

  // optional int32 move_mode_flag = 7 [default = -1];
  if (has_move_mode_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->move_mode_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_CMD_Response_flag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Error_ID = 1 [default = -1];
    if (has_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_id());
    }

    // optional int32 cmd_received_flag = 2 [default = -1];
    if (has_cmd_received_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_received_flag());
    }

    // optional int32 path_formed_flag = 3 [default = -1];
    if (has_path_formed_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->path_formed_flag());
    }

    // optional int32 goal_reached_flag = 4 [default = -1];
    if (has_goal_reached_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_reached_flag());
    }

    // optional int32 emergency_stop_flag = 5 [default = -1];
    if (has_emergency_stop_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emergency_stop_flag());
    }

    // optional int32 obstacle_forward_flag = 6 [default = -1];
    if (has_obstacle_forward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_forward_flag());
    }

    // optional int32 move_mode_flag = 7 [default = -1];
    if (has_move_mode_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_mode_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CMD_Response_flag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_CMD_Response_flag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_CMD_Response_flag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_CMD_Response_flag::MergeFrom(const Response_CMD_Response_flag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_id()) {
      set_error_id(from.error_id());
    }
    if (from.has_cmd_received_flag()) {
      set_cmd_received_flag(from.cmd_received_flag());
    }
    if (from.has_path_formed_flag()) {
      set_path_formed_flag(from.path_formed_flag());
    }
    if (from.has_goal_reached_flag()) {
      set_goal_reached_flag(from.goal_reached_flag());
    }
    if (from.has_emergency_stop_flag()) {
      set_emergency_stop_flag(from.emergency_stop_flag());
    }
    if (from.has_obstacle_forward_flag()) {
      set_obstacle_forward_flag(from.obstacle_forward_flag());
    }
    if (from.has_move_mode_flag()) {
      set_move_mode_flag(from.move_mode_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_CMD_Response_flag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CMD_Response_flag::CopyFrom(const Response_CMD_Response_flag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CMD_Response_flag::IsInitialized() const {

  return true;
}

void Response_CMD_Response_flag::Swap(Response_CMD_Response_flag* other) {
  if (other != this) {
    std::swap(error_id_, other->error_id_);
    std::swap(cmd_received_flag_, other->cmd_received_flag_);
    std::swap(path_formed_flag_, other->path_formed_flag_);
    std::swap(goal_reached_flag_, other->goal_reached_flag_);
    std::swap(emergency_stop_flag_, other->emergency_stop_flag_);
    std::swap(obstacle_forward_flag_, other->obstacle_forward_flag_);
    std::swap(move_mode_flag_, other->move_mode_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_CMD_Response_flag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CMD_Response_flag_descriptor_;
  metadata.reflection = Response_CMD_Response_flag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_CMD::kCMDIDFieldNumber;
const int Response_CMD::kResponseFlagsFieldNumber;
const int Response_CMD::kRobotPoseFieldNumber;
const int Response_CMD::kBatteryCapacityFieldNumber;
const int Response_CMD::kChargingFlagFieldNumber;
#endif  // !_MSC_VER

Response_CMD::Response_CMD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_CMD::InitAsDefaultInstance() {
  response_flags_ = const_cast< ::dataserver_msg::Response_CMD_Response_flag*>(&::dataserver_msg::Response_CMD_Response_flag::default_instance());
  robot_pose_ = const_cast< ::dataserver_msg::Position*>(&::dataserver_msg::Position::default_instance());
}

Response_CMD::Response_CMD(const Response_CMD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_CMD::SharedCtor() {
  _cached_size_ = 0;
  cmd_id_ = 0;
  response_flags_ = NULL;
  robot_pose_ = NULL;
  battery_capacity_ = -1;
  charging_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CMD::~Response_CMD() {
  SharedDtor();
}

void Response_CMD::SharedDtor() {
  if (this != default_instance_) {
    delete response_flags_;
    delete robot_pose_;
  }
}

void Response_CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CMD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CMD_descriptor_;
}

const Response_CMD& Response_CMD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_5fmsg_2eproto();
  return *default_instance_;
}

Response_CMD* Response_CMD::default_instance_ = NULL;

Response_CMD* Response_CMD::New() const {
  return new Response_CMD;
}

void Response_CMD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_id_ = 0;
    if (has_response_flags()) {
      if (response_flags_ != NULL) response_flags_->::dataserver_msg::Response_CMD_Response_flag::Clear();
    }
    if (has_robot_pose()) {
      if (robot_pose_ != NULL) robot_pose_->::dataserver_msg::Position::Clear();
    }
    battery_capacity_ = -1;
    charging_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CMD_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response_flags;
        break;
      }

      // optional .dataserver_msg.Response_CMD.Response_flag response_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_robot_pose;
        break;
      }

      // optional .dataserver_msg.Position robot_pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robot_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battery_capacity;
        break;
      }

      // optional int32 battery_capacity = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battery_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_capacity_)));
          set_has_battery_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charging_flag;
        break;
      }

      // optional int32 charging_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charging_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charging_flag_)));
          set_has_charging_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CMD_ID = 1;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_id(), output);
  }

  // optional .dataserver_msg.Response_CMD.Response_flag response_flags = 2;
  if (has_response_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response_flags(), output);
  }

  // optional .dataserver_msg.Position robot_pose = 3;
  if (has_robot_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robot_pose(), output);
  }

  // optional int32 battery_capacity = 4 [default = -1];
  if (has_battery_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battery_capacity(), output);
  }

  // optional int32 charging_flag = 5;
  if (has_charging_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->charging_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_CMD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CMD_ID = 1;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_id(), target);
  }

  // optional .dataserver_msg.Response_CMD.Response_flag response_flags = 2;
  if (has_response_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response_flags(), target);
  }

  // optional .dataserver_msg.Position robot_pose = 3;
  if (has_robot_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->robot_pose(), target);
  }

  // optional int32 battery_capacity = 4 [default = -1];
  if (has_battery_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battery_capacity(), target);
  }

  // optional int32 charging_flag = 5;
  if (has_charging_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->charging_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_CMD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CMD_ID = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_id());
    }

    // optional .dataserver_msg.Response_CMD.Response_flag response_flags = 2;
    if (has_response_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_flags());
    }

    // optional .dataserver_msg.Position robot_pose = 3;
    if (has_robot_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot_pose());
    }

    // optional int32 battery_capacity = 4 [default = -1];
    if (has_battery_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battery_capacity());
    }

    // optional int32 charging_flag = 5;
    if (has_charging_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charging_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CMD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_CMD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_CMD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_CMD::MergeFrom(const Response_CMD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_response_flags()) {
      mutable_response_flags()->::dataserver_msg::Response_CMD_Response_flag::MergeFrom(from.response_flags());
    }
    if (from.has_robot_pose()) {
      mutable_robot_pose()->::dataserver_msg::Position::MergeFrom(from.robot_pose());
    }
    if (from.has_battery_capacity()) {
      set_battery_capacity(from.battery_capacity());
    }
    if (from.has_charging_flag()) {
      set_charging_flag(from.charging_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_CMD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CMD::CopyFrom(const Response_CMD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CMD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_robot_pose()) {
    if (!this->robot_pose().IsInitialized()) return false;
  }
  return true;
}

void Response_CMD::Swap(Response_CMD* other) {
  if (other != this) {
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(response_flags_, other->response_flags_);
    std::swap(robot_pose_, other->robot_pose_);
    std::swap(battery_capacity_, other->battery_capacity_);
    std::swap(charging_flag_, other->charging_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_CMD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CMD_descriptor_;
  metadata.reflection = Response_CMD_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataserver_msg

// @@protoc_insertion_point(global_scope)
