#include "carmenmap.hpp"
#include <image.h>
#include <string>
#include<iostream>
using namespace std;
int main(int argc, char ** argv)
{
	if(argc <= 3)
	{
		cerr<< "input the map filename pngfilename"<<endl;
        cerr<< "executable -c xxx.map xxx.png: sava the carmen map to png"<<endl;
        cerr<< "executable -i xxx.png xxx.map: sava the png file to carmen map"<<endl;
        cerr<< "executable -f xxx.png resolution : fix the png"<<endl;
		return -1;
	}
    string op = string(argv[1]);
    if( op == "-c"  )
    {
        carmenMap cmap(argv[2]);

        Map img(cmap.width(), cmap.height(), cmap.scale() );
        for(int x = 0; x < cmap.width(); x++)
        {
            for(int y = 0; y < cmap.height(); y++)
            {
                double occ = cmap(x,y);;
                if(occ > 1)
                    occ = 1;
                if(occ>=-0.001)
                {
                    unsigned int v =(1.0 - occ)* 0xFF;
                    img(x,y) = 0xFF000000 + (v<<16) + (v<<8) + v ;
                }
                else
                    img(x,y) = Map::UNKOWN;//m.at<unsigned char> (x,y,0) =  255; 
            }
        }
        img.save(argv[3]);
    }
    else if ( op == "-f"  ) 
    {
        Map img( argv[2] );
        img.set_resolution( atof(argv[3]) );
		img.set_origin(0,0);
        img.save( argv[2] );
    }
    else if( op == "-i" )
    {
        Map img( argv[2] );

        static unsigned char data[562] = {
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x0A, 0x23, 0x0A, 0x23, 0x20, 0x43, 0x61, 0x72, 0x6E, 0x65, 0x67,
            0x69, 0x65, 0x20, 0x4D, 0x65, 0x6C, 0x6C, 0x6F, 0x6E, 0x20, 0x52, 0x6F, 0x62, 0x6F, 0x74, 0x20,
            0x54, 0x6F, 0x6F, 0x6C, 0x6B, 0x69, 0x74, 0x20, 0x28, 0x43, 0x41, 0x52, 0x4D, 0x45, 0x4E, 0x29,
            0x20, 0x6D, 0x61, 0x70, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x0A, 0x23, 0x0A, 0x23, 0x20, 0x4D, 0x61,
            0x70, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x20, 0x20, 0x20, 0x20, 0x3A, 0x20, 0x55, 0x4E,
            0x4B, 0x4E, 0x4F, 0x57, 0x4E, 0x0A, 0x23, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6F, 0x6E,
            0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x3A, 0x20, 0x54, 0x68, 0x75, 0x20, 0x4E, 0x6F, 0x76, 0x20,
            0x32, 0x39, 0x20, 0x32, 0x31, 0x3A, 0x31, 0x36, 0x3A, 0x33, 0x38, 0x20, 0x32, 0x30, 0x31, 0x32,
            0x0A, 0x23, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x3A, 0x20, 0x31, 0x37, 0x35, 0x36, 0x20, 0x78, 0x20, 0x31, 0x30, 0x34, 0x33, 0x0A, 0x23,
            0x20, 0x52, 0x65, 0x73, 0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x3A,
            0x20, 0x30, 0x2E, 0x31, 0x0A, 0x23, 0x20, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x3A, 0x20, 0x2E, 0x2F, 0xE5, 0xA2, 0x99, 0x2F, 0x6D, 0x61, 0x70,
            0x6C, 0x6D, 0x73, 0x32, 0x30, 0x30, 0x2E, 0x6C, 0x6F, 0x67, 0x0A, 0x23, 0x20, 0x44, 0x65, 0x73,
            0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x20, 0x20, 0x3A, 0x20, 0x23, 0x0A, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
            0x23, 0x23, 0x23, 0x23, 0x0A, 0x43, 0x41, 0x52, 0x4D, 0x45, 0x4E, 0x4D, 0x41, 0x50, 0x46, 0x49,
            0x4C, 0x45, 0x76, 0x30, 0x32, 0x30, 0x20, 0xB8, 0x00, 0x00, 0x00, 0x43, 0x52, 0x45, 0x41, 0x54,
            0x4F, 0x52, 0x20, 0x20, 0x20, 0x55, 0x4E, 0x4B, 0x4E, 0x4F, 0x57, 0x4E, 0x20, 0x20, 0x20, 0x36,
            0x60, 0xB7, 0x50, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x01, 0x66, 0xC9, 0x6F, 0x00, 0x47, 0x52, 0x49, 0x44, 0x4D, 0x41, 0x50, 0x20,
            0x20, 0x20
        };
        try{
            FILE* fp = fopen( argv[3] ,"wb");
            if(!fp)
                throw "create file error!";
            int x_size = img.width();
            int y_size = img.height();
            float resolution = img.resolution();
            fwrite(data, sizeof(data), 1, fp);
            fwrite(&x_size, sizeof(int), 1, fp);
            fwrite(&y_size, sizeof(int), 1, fp);
            fwrite(&resolution, sizeof(float), 1, fp);


            for(int i = 0; i < x_size; ++i)
            {
                for(int j = 0; j < y_size; ++j)
                {
                    float v;
                    if( img(i,j) == Map::UNKOWN )
                        v = -1.0;
                    else
                    {
                        v = 1.0 - ( Map::red( img(i,j) ) / 255.0 );
                    }

                    fwrite(&v,sizeof(v),1,fp);
                }
            }
            fclose(fp);

        }catch(...)
        {
            printf("打开文件失败！");
            return -1;
        }
    }
    
    
    
	
}